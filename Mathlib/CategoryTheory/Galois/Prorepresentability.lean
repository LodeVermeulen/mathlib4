/-
Copyright (c) 2024 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib.CategoryTheory.CofilteredSystem
import Mathlib.CategoryTheory.Galois.Decomposition
import Mathlib.CategoryTheory.Limits.FunctorCategory

/-!
# Pro-Representability of fiber functors

We show that any fiber functor is pro-representable, i.e. there exists a pro-object
`X : I ‚•§ C` such that `F` is naturally isomorphic to `X ‚ãô coyoneda`.

## Main results


## References

* H. W. Lenstra. Galois theory for schemes
  <https://websites.math.leidenuniv.nl/algebra/GSchemes.pdf>

-/

universe u‚ÇÅ u‚ÇÇ w

namespace CategoryTheory

namespace PreGaloisCategory

open Limits Functor

variable (C : Type u‚ÇÅ) [Category.{u‚ÇÇ} C] [GaloisCategory C]

def GaloisObjects := { A : C | IsGalois A }

variable (F : C ‚•§ FintypeCat.{u‚ÇÇ}) [FiberFunctor F]

variable {C}

def Idx : Type (max u‚ÇÅ u‚ÇÇ) := (A : GaloisObjects C) √ó F.obj (A : C)

instance : Category.{u‚ÇÇ} (Idx F) where
  Hom := by
    intro ‚ü®A, a‚ü© ‚ü®B, b‚ü©
    exact { f : (B : C) ‚ü∂ A // F.map f b = a }
  id := by
    intro ‚ü®A, a‚ü©
    exact ‚ü®ùüô (A : C), by simp‚ü©
  comp := by
    intro ‚ü®A, a‚ü© ‚ü®B, b‚ü© ‚ü®C, c‚ü© ‚ü®f, hf‚ü© ‚ü®g, hg‚ü©
    have h : F.map (g ‚â´ f) c = a := by
      simp only [F.map_comp, FintypeCat.comp_apply, hf, hg]
    exact ‚ü®g ‚â´ f, h‚ü©

instance : IsFilteredOrEmpty (Idx F) where
  cocone_objs := fun ‚ü®A, a‚ü© ‚ü®B, b‚ü© ‚Ü¶ by
    obtain ‚ü®Z, f, z, hgal, hfz‚ü© := exists_map_from_galois_of_fiber F (A ‚®Ø B)
      <| (fiberBinaryProductEquiv F A B).symm (a, b)
    refine ‚ü®‚ü®‚ü®Z, hgal‚ü©, z‚ü©, ‚ü®f ‚â´ prod.fst, ?_‚ü©, ‚ü®f ‚â´ prod.snd, ?_‚ü©, trivial‚ü©
    simp only [F.map_comp, hfz, FintypeCat.comp_apply, fiberBinaryProductEquiv_symm_fst_apply]
    simp only [F.map_comp, hfz, FintypeCat.comp_apply, fiberBinaryProductEquiv_symm_snd_apply]
  cocone_maps := fun ‚ü®A, a‚ü© ‚ü®B, b‚ü© ‚ü®f, hf‚ü© ‚ü®g, hg‚ü© ‚Ü¶ by
    obtain ‚ü®Z, h, z, hgal, hhz‚ü© := exists_map_from_galois_of_fiber F B b
    refine ‚ü®‚ü®‚ü®Z, hgal‚ü©, z‚ü©, ‚ü®h, hhz‚ü©, ?_‚ü©
    apply Subtype.ext
    apply evaluationInjective_of_isConnected F Z A z
    show F.map (h ‚â´ f) z = F.map (h ‚â´ g) z
    simp only [map_comp, FintypeCat.comp_apply, hhz, hf, hg]

def can : Idx F ‚•§ C·µí·µñ where
  obj := fun ‚ü®A, _‚ü© ‚Ü¶ ‚ü®A‚ü©
  map := fun ‚ü®f, _‚ü© ‚Ü¶ ‚ü®f‚ü©

@[simp]
lemma can_map_eq {A B : Idx F} (f : A ‚ü∂ B) : ((can F).map f).unop = f.val :=
  rfl

def cocone : Cocone (can F ‚ãô coyoneda) where
  pt := F ‚ãô FintypeCat.incl
  Œπ := {
    app := by
      intro ‚ü®A, a‚ü©
      exact {
        app := by
          intro X (f : (A : C) ‚ü∂ X)
          -- evaluation at a
          exact F.map f a
      }
    naturality := by
      intro ‚ü®A, a‚ü© ‚ü®B, b‚ü© ‚ü®f, hf‚ü©
      ext Y (g : (A : C) ‚ü∂ Y)
      simp [hf]
  }

#check Types.FilteredColimit.isColimitOf

noncomputable def iscolimit : IsColimit (cocone F) := by
  apply evaluationJointlyReflectsColimits
  intro X
  let s : Cocone ((can F ‚ãô coyoneda) ‚ãô (evaluation C (Type u‚ÇÇ)).obj X) :=
    ((evaluation C (Type u‚ÇÇ)).toPrefunctor.obj X).mapCocone (cocone F)
  show IsColimit s
  apply Types.FilteredColimit.isColimitOf.{max u‚ÇÅ u‚ÇÇ, max u‚ÇÅ u‚ÇÇ, u‚ÇÇ}
    ((can F ‚ãô coyoneda) ‚ãô (evaluation C (Type u‚ÇÇ)).obj X)
    (((evaluation C (Type u‚ÇÇ)).obj X).mapCocone (cocone F))
  intro (x : F.obj X)
  obtain ‚ü®Y, i, y, h1, _, _‚ü© := fiber_in_connected_component F X x
  obtain ‚ü®Z, f, z, hgal, hfz‚ü© := exists_map_from_galois_of_fiber F Y y
  use ‚ü®‚ü®Z, hgal‚ü©, z‚ü©
  use f ‚â´ i
  show x = F.map (f ‚â´ i) z
  simp only [‚Üêh1, map_comp, FintypeCat.comp_apply, hfz]
  intro ‚ü®A, a‚ü© ‚ü®B, b‚ü© (u : (A : C) ‚ü∂ X) (v : (B : C) ‚ü∂ X) (h : F.map u a = F.map v b)
  obtain ‚ü®‚ü®‚ü®Z, (hgal : IsGalois Z)‚ü©, z‚ü©, ‚ü®f, hf‚ü©, ‚ü®g, hg‚ü©, _‚ü© :=
    @IsFilteredOrEmpty.cocone_objs (Idx F) _ _ (‚ü®A, a‚ü© : Idx F) (‚ü®B, b‚ü© : Idx F)
  use ‚ü®‚ü®Z, hgal‚ü©, z‚ü©
  use ‚ü®f, hf‚ü©
  use ‚ü®g, hg‚ü©
  have : IsConnected Z := sorry
  apply evaluationInjective_of_isConnected F Z X z
  show F.map (f ‚â´ u) z = F.map (g ‚â´ v) z
  rw [map_comp, FintypeCat.comp_apply, hf, map_comp, FintypeCat.comp_apply, hg, h]

--instance (X : C) : SMul (Aut F) (F.obj X) := ‚ü®fun œÉ a => (œÉ.app X).hom a‚ü©

private noncomputable def autMap' {A B : C} [IsGalois B] (f : A ‚ü∂ B) (a : F.obj A)
    (b : F.obj B) (œÉ : Aut A) : { œÑ : Aut B | F.map œÑ.hom b = F.map (œÉ.hom ‚â´ f) a } := by
  choose œÑ h using MulAction.surjective_smul (Aut B) b (F.map (œÉ.hom ‚â´ f) a)
  exact ‚ü®œÑ, h‚ü©

private noncomputable def autMap {A B : C} [IsGalois B] (f : A ‚ü∂ B) (a : F.obj A)
    (b : F.obj B) (œÉ : Aut A) : Aut B := autMap' F f a b œÉ

@[simp]
lemma autMap_eval {A B : C} [IsGalois B] (f : A ‚ü∂ B) (a : F.obj A) (b : F.obj B)
    (œÉ : Aut A) : F.map (autMap F f a b œÉ : Aut B).hom b = F.map (œÉ.hom ‚â´ f) a := by
  show F.map (autMap' F f a b œÉ : Aut B).hom b = F.map (œÉ.hom ‚â´ f) a
  let ‚ü®_, h‚ü© := autMap' F f a b œÉ
  exact h

lemma autMap_surjective {A B : C} [IsGalois A] [IsGalois B] (f : A ‚ü∂ B)
    (a : F.obj A) (b : F.obj B) : Function.Surjective (autMap F f a b) := by
  intro œÉ
  --have h : Nonempty (F.obj A) := nonempty_fibre_of_connected A
  obtain ‚ü®a', ha'‚ü© := surjective_of_nonempty_fiber_of_isConnected F f (F.map œÉ.hom b)
  obtain ‚ü®œÑ, (hœÑ : F.map œÑ.hom a = a')‚ü© := MulAction.exists_smul_eq (Aut A) a a'
  use œÑ
  apply evaluation_aut_injective_of_isConnected F B b
  simp only [autMap_eval, map_comp, FintypeCat.comp_apply]
  rw [hœÑ, ha']

lemma autMap_comp {A B : C} [IsConnected A] [IsGalois B] (f : A ‚ü∂ B) (a : F.obj A) (b : F.obj B)
    (h : F.map f a = b)
    (œÉ : Aut A) : œÉ.hom ‚â´ f = f ‚â´ (autMap F f a b œÉ).hom := by
  apply evaluationInjective_of_isConnected F A B a
  show F.map (œÉ.hom ‚â´ f) a = F.map (f ‚â´ (autMap F f a b œÉ).hom) a
  simp only [map_comp, FintypeCat.comp_apply, h, autMap_eval]

lemma autMap_mul {A B : C} [IsConnected A] [IsGalois B] (f : A ‚ü∂ B) (a : F.obj A) (b : F.obj B)
    (h : F.map f a = b)
    (œÉ œÑ : Aut A) : autMap F f a b (œÉ * œÑ) = autMap F f a b œÉ * autMap F f a b œÑ := by
  apply evaluation_aut_injective_of_isConnected F (B : C) b
  show F.map (autMap F f a b (œÉ * œÑ)).hom b =
    F.map (autMap F f a b œÉ * autMap F f a b œÑ).hom b
  simp only [autMap_eval]
  convert_to F.map ((œÑ.hom ‚â´ œÉ.hom) ‚â´ f) a
    = F.map ((f ‚â´ (autMap F f a b œÑ).hom) ‚â´ (autMap F f a b œÉ).hom) a
  erw [‚Üêh, Functor.map_comp]
  simp only [FintypeCat.comp_apply, autMap_eval, map_comp, Category.assoc]
  erw [‚ÜêautMap_comp F f a b h œÑ, Category.assoc, Category.assoc,
    ‚ÜêautMap_comp F f a b h œÉ]

noncomputable def autMapMul : {A B : (Idx F)·µí·µñ} ‚Üí (A ‚ü∂ B) ‚Üí Aut (A.1.1 : C) ‚Üí* Aut (B.1.1 : C) := by
  intro ‚ü®‚ü®A, (h1 : IsGalois A)‚ü©, a‚ü© ‚ü®‚ü®B, (h2 : IsGalois B)‚ü©, b‚ü© ‚ü®f, hf‚ü©
  apply MonoidHom.mk'
  exact autMap_mul F f a b hf

noncomputable def autGaloisSystem : (Idx F)·µí·µñ ‚•§ Type w where
  obj := fun ‚ü®A, _‚ü© => Aut (A : C)
  map := by
    intro ‚ü®A, _‚ü© ‚ü®B, _‚ü© f
    exact (autMapMul F f : Aut (A : C) ‚Üí Aut (B : C))
  map_id := by
    intro ‚ü®‚ü®A, (hAgal : IsGalois A)‚ü©, a‚ü©
    ext (œÉ : Aut A)
    have : autMap F (ùüô A) a a œÉ = œÉ := by
      apply evaluation_aut_injective_of_isConnected F (A : C) a
      simp only [autMap_eval F (ùüô A) a a œÉ, Category.comp_id]
    exact congrArg Iso.hom this
  map_comp := by
    intro ‚ü®‚ü®A, (hAgal : IsGalois A)‚ü©, a‚ü© ‚ü®‚ü®B, (hBgal : IsGalois B)‚ü©, b‚ü©
      ‚ü®‚ü®C, (hCgal : IsGalois C)‚ü©, c‚ü© ‚ü®f, hf‚ü© ‚ü®g, hg‚ü©
    ext (œÉ : Aut A)
    apply congrArg Iso.hom
    show autMap F (f ‚â´ g) a c œÉ = autMap F g b c (autMap F f a b œÉ)
    apply evaluation_aut_injective_of_isConnected F C c
    simp only [autMap_eval, map_comp, FintypeCat.comp_apply]

noncomputable def autGalois : Type w := limit (autGaloisSystem F)

noncomputable def autGaloisSystemInv : autGaloisSystem F ‚ü∂ autGaloisSystem F where
  app := by
    intro ‚ü®‚ü®A, _‚ü©, _‚ü©
    show Aut A ‚ü∂ Aut A
    intro œÉ
    exact œÉ‚Åª¬π
  naturality := by
    intro ‚ü®A, _‚ü© ‚ü®B, _‚ü© f
    simp
    ext (œÉ : Aut (A : C))
    show (autMapMul F f œÉ)‚Åª¬π = autMapMul F f œÉ‚Åª¬π
    simp only [_root_.map_inv]

noncomputable def autGaloisInv : autGalois F ‚Üí autGalois F := lim.map (autGaloisSystemInv F)

private noncomputable def mapAutGaloisCocone (a : autGalois F) : Cocone (can F ‚ãô coyoneda) := {
    pt := F ‚ãô FintypeCat.incl
    Œπ := {
      app := by
        intro ‚ü®‚ü®A, hGal‚ü©, (x : F.obj A)‚ü©
        constructor
        swap
        intro X
        show (A ‚ü∂ X) ‚Üí F.obj X
        intro f
        let œÉ : Aut A := limit.œÄ (autGaloisSystem F) ‚ü®‚ü®A, hGal‚ü©, x‚ü© a
        exact F.map (œÉ.hom ‚â´ f) x
        intro X Y f
        ext (g : A ‚ü∂ X)
        simp
      naturality := by
        intro ‚ü®‚ü®A, (hagal : IsGalois A)‚ü©, (x : F.obj A)‚ü© ‚ü®‚ü®B, (hbgal : IsGalois B)‚ü©, (y : F.obj B)‚ü© ‚ü®f, hf‚ü©
        ext X (g : A ‚ü∂ X)
        simp
        rw [‚Üêhf]
        simp
        apply congrArg
        show (F.map (limit.œÄ (autGaloisSystem F) ‚ü®‚ü®B, _‚ü©, y‚ü© a).hom ‚â´ F.map f) y =
          (F.map f ‚â´ F.map (limit.œÄ (autGaloisSystem F) ‚ü®‚ü®A, _‚ü©, F.map f y‚ü© a).hom) y
        rw [‚ÜêF.map_comp, ‚ÜêF.map_comp]
        let A' : (Idx F)·µí·µñ := ‚ü®‚ü®A, hagal‚ü©, F.map f y‚ü©
        let B' : (Idx F)·µí·µñ := ‚ü®‚ü®B, hbgal‚ü©, y‚ü©
        let f' : B' ‚ü∂ A' := ‚ü®f, rfl‚ü©
        have : (limit.œÄ (autGaloisSystem F) ‚ü®‚ü®B, _‚ü©, y‚ü© a).hom ‚â´ f = 
            f ‚â´ (limit.œÄ (autGaloisSystem F) ‚ü®‚ü®A, _‚ü©, F.map f y‚ü© a).hom := by
          rw [‚Üêlimit.w (autGaloisSystem F) f']
          show (limit.œÄ (autGaloisSystem F) B' a).hom ‚â´ f =
            f ‚â´ ((limit.œÄ (autGaloisSystem F) B' ‚â´ autMap F f y (F.map f y)) a).hom
          rw [autMap_comp F f y (F.map f y) rfl]
          rfl
        rw [this]
    }
  }

noncomputable def mapAutGaloisEnd (a : autGalois F) : End F := by
  let u' : F ‚ãô FintypeCat.incl ‚ü∂ F ‚ãô FintypeCat.incl := (iscolimit F).desc (mapAutGaloisCocone F a)
  exact {
    app := fun X x => u'.app X x
    naturality := by
      intro X Y f
      ext x
      erw [u'.naturality]
      rfl
  }

lemma mapAutGaloisEnd_autGaloisInv (œÉ : autGalois F) :
    mapAutGaloisEnd F œÉ ‚â´ mapAutGaloisEnd F (autGaloisInv F œÉ) = ùüô F := by
  let u : F ‚ü∂ F := mapAutGaloisEnd F œÉ
  let u' : F ‚ü∂ F := mapAutGaloisEnd F (autGaloisInv F œÉ)
  show u ‚â´ u' = ùüô F
  ext X x
  obtain ‚ü®A, f, a, hgal, hf‚ü© := exists_map_from_galois_of_fiber F X x
  rw [‚Üêhf]
  have : F.map f a = (((cocone F).Œπ.app ‚ü®‚ü®A, hgal‚ü©, a‚ü©).app X : (A ‚ü∂ X) ‚Üí F.obj X) f := rfl
  show (mapAutGaloisEnd F (autGaloisInv F œÉ)).app X
    ((mapAutGaloisEnd F œÉ).app X (F.map f a))
    = F.map f a
  rw [this]
  simp
  let v : F ‚ãô FintypeCat.incl ‚ü∂ F ‚ãô FintypeCat.incl := (iscolimit F).desc
    (mapAutGaloisCocone F œÉ)
  let v' : F ‚ãô FintypeCat.incl ‚ü∂ F ‚ãô FintypeCat.incl := (iscolimit F).desc
    (mapAutGaloisCocone F (autGaloisInv F œÉ))
  let œÑ : Aut A := limit.œÄ (autGaloisSystem F) ‚ü®‚ü®A, hgal‚ü©, a‚ü© œÉ
  let œÑ' : Aut A := limit.œÄ (autGaloisSystem F) ‚ü®‚ü®A, hgal‚ü©, a‚ü© (autGaloisInv F œÉ)
  have ht : œÑ' = œÑ‚Åª¬π := by
    show ((lim.map (autGaloisSystemInv F)) ‚â´ limit.œÄ (autGaloisSystem F) ‚ü®‚ü®A, _‚ü©, a‚ü©) œÉ = œÑ‚Åª¬π
    erw [limMap_œÄ]
    rfl
  have : (((cocone F).Œπ.app ‚ü®‚ü®A, hgal‚ü©, a‚ü©).app X ‚â´ v.app X) = (((cocone F).Œπ.app ‚ü®‚ü®A, _‚ü©, a‚ü©) ‚â´ v).app X := by
    rfl
  have : v.app X (((cocone F).Œπ.app ‚ü®‚ü®A, hgal‚ü©, a‚ü©).app X f)
    = ((cocone F).Œπ.app ‚ü®‚ü®A, _‚ü©, a‚ü© ‚â´ (iscolimit F).desc (mapAutGaloisCocone F œÉ)).app X f := rfl
  show v'.app X (v.app X (((cocone F).Œπ.app ‚ü®‚ü®A, _‚ü©, a‚ü©).app X f)) = ((cocone F).Œπ.app ‚ü®‚ü®A, _‚ü©, a‚ü©).app X f
  rw [this, (iscolimit F).fac]
  simp
  show (((cocone F).Œπ.app ‚ü®‚ü®A, hgal‚ü©, a‚ü© ‚â´ v').app X (œÑ.hom ‚â´ f)) = F.map f a
  rw [(iscolimit F).fac]
  show F.map (œÑ'.hom ‚â´ œÑ.hom ‚â´ f) a = F.map f a
  rw [ht, ‚ÜêCategory.assoc]
  show F.map ((œÑ * œÑ‚Åª¬π).hom ‚â´ f) a = F.map f a
  rw [mul_right_inv]
  simp
  show F.map f (F.map (ùüô A) a) = F.map f a
  simp

private lemma autGaloisInv_autGaloisInv_eq_id (œÉ : autGalois F) :
    autGaloisInv F (autGaloisInv F œÉ) = œÉ := by
  show (lim.map (autGaloisSystemInv F) ‚â´ lim.map (autGaloisSystemInv F)) œÉ = œÉ
  rw [‚Üêlim.map_comp]
  have : autGaloisSystemInv F ‚â´ autGaloisSystemInv F = ùüô (autGaloisSystem F) := rfl
  rw [this]
  simp only [lim_obj, FunctorToTypes.map_id_apply]

noncomputable def mapAutGaloisAut (œÉ : autGalois F) : Aut F := by
  apply CategoryTheory.Iso.mk
  exact mapAutGaloisEnd_autGaloisInv F œÉ
  conv => lhs; congr; rfl; rw [‚ÜêautGaloisInv_autGaloisInv_eq_id F œÉ]
  exact mapAutGaloisEnd_autGaloisInv F (autGaloisInv F œÉ)

private lemma proj_surj (A : C) [inst : IsGalois A] (a : F.obj A) :
    Function.Surjective (limit.œÄ (autGaloisSystem F) ‚ü®‚ü®A, inst‚ü©, a‚ü©) := by
  intro (œÉ : Aut A)
  have (i : (Idx F)·µí·µñ) : Nonempty ((autGaloisSystem F).obj i) := by
    show Nonempty (Aut (i.1.1.1))
    constructor
    exact 1
  have (i : (Idx F)·µí·µñ) : Finite ((autGaloisSystem F).obj i) := by
    show Finite (Aut (i.1.1.1))
    have : IsGalois i.1.1.1 := i.1.1.2
    infer_instance
  have fsur (i j : (Idx F)·µí·µñ) (f : i ‚ü∂ j) : Function.Surjective ((autGaloisSystem F).map f) := by
    have : IsGalois i.1.1.1 := i.1.1.2
    have : IsGalois j.1.1.1 := j.1.1.2
    exact autMap_surjective F f.1.1 i.1.2 j.1.2
  obtain ‚ü®s', hs‚ü© := eval_section_surjective_of_surjective (autGaloisSystem F) fsur
    ‚ü®‚ü®A, inst‚ü©, a‚ü© œÉ
  let s : autGalois F := (Types.limitEquivSections (autGaloisSystem F)).symm s'
  use s
  simp only [Types.limitEquivSections_symm_apply]
  exact hs

private def transitive_of_galois (X : C) [inst : IsGalois X] :
    MulAction.IsPretransitive (Aut F) (F.obj X) := by
  constructor
  intro x y
  have : ‚àÉ œÜ : Aut X, F.map œÜ.hom x = y := MulAction.IsPretransitive.exists_smul_eq x y
  obtain ‚ü®(œÜ : Aut X), h‚ü© := this
  obtain ‚ü®a, ha‚ü© := proj_surj F X x œÜ
  let œÉ : Aut F := mapAutGaloisAut F a
  use œÉ
  let f : X ‚ü∂ X := ùüô X
  have hx : x = (((cocone F).Œπ.app ‚ü®‚ü®X, inst‚ü©, x‚ü©).app X f) := by
    show x = F.map (ùüô X) x
    simp only [CategoryTheory.Functor.map_id, FintypeCat.id_apply]
  show ((iscolimit F).desc (mapAutGaloisCocone F a)).app X x = y
  rw [hx]
  show (((cocone F).Œπ.app { fst := { val := X, property := inst }, snd := x } ‚â´ 
      IsColimit.desc (iscolimit F) (mapAutGaloisCocone F a)).app X f) = y
  rw [(iscolimit F).fac]
  show F.map ((limit.œÄ (autGaloisSystem F) ‚ü®‚ü®X, inst‚ü©, x‚ü© a).hom ‚â´ f) x = y
  rw [ha]
  simpa

instance pretransitiveOfConnected (X : C) [IsConnected X] :
    MulAction.IsPretransitive (Aut F) (F.obj X) := by
  obtain ‚ü®A, f, hgal‚ü© := exists_map_from_galois_of_connected F X
  have hs : Function.Surjective (F.map f) := surjective_of_nonempty_fiber_of_isConnected F f
  constructor
  intro x y
  obtain ‚ü®a, ha‚ü© := hs x
  obtain ‚ü®b, hb‚ü© := hs y
  have : MulAction.IsPretransitive (Aut F) (F.obj A) := transitive_of_galois F A
  obtain ‚ü®œÉ, (hœÉ : œÉ.hom.app A a = b)‚ü© := MulAction.exists_smul_eq (Aut F) a b
  use œÉ
  rw [‚Üêha, ‚Üêhb]
  show (F.map f ‚â´ œÉ.hom.app X) a = F.map f b
  rw [œÉ.hom.naturality, FintypeCat.comp_apply, hœÉ]
