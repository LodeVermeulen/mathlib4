import Mathlib.Algebra.Group.Units
import Mathlib.Algebra.Group.Equiv.Basic
import Mathlib.CategoryTheory.Limits.Opposites
import Mathlib.CategoryTheory.Yoneda
import Mathlib.CategoryTheory.Limits.Indization.IndObject
import Mathlib.CategoryTheory.Limits.Opposites

section

variable (G M : Type*) [Group G] [Monoid M] (f : G ‚âÉ* M) (g : M ‚âÉ* G)

lemma isUnit_of_equiv (x : M) : IsUnit x := by
  rw [isUnit_iff_exists]
  refine ‚ü®f (f.symm x)‚Åª¬π, ?_, ?_‚ü©
  all_goals
  apply EquivLike.injective f.symm
  simp

end

open CategoryTheory Limits Opposite

universe u‚ÇÅ u‚ÇÇ v‚ÇÅ v‚ÇÇ

section

variable {C : Type u‚ÇÅ} [Category.{u‚ÇÇ} C] {I : Type v‚ÇÅ} [Category.{v‚ÇÇ} I] (F : I ‚•§ C)
variable [HasColimit F] [HasLimit (F.op ‚ãô coyoneda)]

instance : HasLimit F.op := hasLimit_op_of_hasColimit F

noncomputable def limitOfOpIsoOpColimit : limit F.op ‚âÖ op <| colimit F :=
  let c : Cocone F := colimit.cocone F
  let hc : IsColimit c := colimit.isColimit F
  limit.isoLimitCone ‚ü®c.op, IsColimit.op hc‚ü©

@[simp]
theorem limitOfOpIsoOpColimit_inv_comp_œÄ (i : I) :
    (limitOfOpIsoOpColimit F).inv ‚â´ limit.œÄ F.op ‚ü®i‚ü© = (colimit.Œπ F i).op := by
  simp [limitOfOpIsoOpColimit]

noncomputable def homCocont : coyoneda.obj (limit F.op) ‚âÖ limit (F.op ‚ãô coyoneda) :=
  preservesLimitIso coyoneda F.op

noncomputable def homCocont' : coyoneda.obj (op <| colimit F) ‚âÖ limit (F.op ‚ãô coyoneda) :=
  coyoneda.mapIso (limitOfOpIsoOpColimit F).symm ‚â™‚â´ homCocont F

noncomputable def homCocont'App [HasLimitsOfShape I·µí·µñ (Type u‚ÇÇ)] (A : C) :
    (colimit F ‚ü∂ A) ‚âÖ limit (F.op ‚ãô yoneda.obj A) :=
  ((homCocont' F).app A).trans <| limitObjIsoLimitCompEvaluation _ _

@[simp]
theorem homCocont'_comp_œÄ (i : I) :
    (homCocont' F).hom ‚â´ (limit.œÄ (F.op.comp coyoneda) ‚ü®i‚ü©)
      = (coyoneda.map (colimit.Œπ F i).op) := by
  simp [homCocont', homCocont]
  rw [‚Üê Functor.map_comp]
  simp

@[simp]
theorem homCocont'App_comp_œÄ [HasLimitsOfShape I·µí·µñ (Type u‚ÇÇ)] (A : C) (i : I) :
    (homCocont'App F A).hom ‚â´ limit.œÄ (F.op ‚ãô yoneda.obj A) ‚ü®i‚ü©
      = (coyoneda.map (colimit.Œπ F i).op).app A := by
  simp [homCocont'App]
  erw [limitObjIsoLimitCompEvaluation_hom_œÄ]
  change ((homCocont' F).hom ‚â´ _).app A = _
  rw [homCocont'_comp_œÄ]

end

variable {C : Type u‚ÇÅ} [Category.{u‚ÇÇ} C] {J : Type v‚ÇÅ} [Category.{v‚ÇÇ} J] (D : J·µí·µñ ‚•§ C)
variable (F : C ‚•§ Type u‚ÇÇ)

variable [HasColimit (D.rightOp ‚ãô coyoneda)] [HasLimitsOfShape J·µí·µñ (Type (max u‚ÇÅ u‚ÇÇ))]

noncomputable def procoyonedaIso :
    (colimit (D.rightOp ‚ãô coyoneda) ‚ü∂ F) ‚âÖ limit (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) :=
  (homCocont'App _ F).trans
    (HasLimit.isoOfNatIso (isoWhiskerLeft (D ‚ãô Prod.sectl C F) (coyonedaLemma C)))

attribute [-simp] types_comp_apply

@[simp]
theorem procoyonedaIso_œÄ (f : colimit (D.rightOp ‚ãô coyoneda) ‚ü∂ F) (i : J) :
    (limit.œÄ (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) (op i)) ((procoyonedaIso D F).hom f)
      = ‚ü®(f.app (D.obj (op i)) ((colimit.Œπ (D.rightOp ‚ãô coyoneda) i).app (D.obj (op i)) (ùüô (D.obj (op i)))))‚ü© := by
  change ((procoyonedaIso D F).hom ‚â´ (limit.œÄ (D ‚ãô F ‚ãô uliftFunctor.{u‚ÇÅ}) (op i))) f = _
  simp [procoyonedaIso]
  rw [‚Üê Category.assoc]
  rw [homCocont'App_comp_œÄ]
  simp [coyonedaLemma, types_comp_apply]
  erw [coyonedaEquiv_comp]
  rw [coyonedaEquiv_apply]
  rfl
