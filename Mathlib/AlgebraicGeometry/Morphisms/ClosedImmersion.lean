/-
Copyright (c) 2023 Jonas van der Schaaf. All rights
reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jonas van der Schaaf, Amelia Livingston
-/
import Mathlib.AlgebraicGeometry.AffineScheme
import Mathlib.AlgebraicGeometry.Stalks
import Mathlib.CategoryTheory.MorphismProperty
import Mathlib.RingTheory.LocalProperties

/-!
# Closed immersions of schemes

## Main definitions

## Implementation notes

## TODO

* Define closed immersions of locally ringed spaces, where we also assume
that the kernel of `O_X ‚Üí f_*O_Y` is locally generated by sections as an
`O_X`-module, and relate it to this file. See https://stacks.math.columbia.edu/tag/01C1.

-/
universe v u

open CategoryTheory CategoryTheory.Limits

namespace AlgebraicGeometry

/-- A morphism of schemes `X ‚ü∂ Y` is a closed immersion if the underlying
topological map is a closed embedding and the induced stalk maps are surjective. -/
class Scheme.IsClosedImmersion {X Y : Scheme} (f : X ‚ü∂ Y) : Prop where
  base_closed : ClosedEmbedding f.1.base
  surj_on_stalks : ‚àÄ x : X, Function.Surjective (PresheafedSpace.stalkMap f.1 x)

namespace Scheme.IsClosedImmersion

open Scheme

local notation "IsClosedImmersion" => Scheme.IsClosedImmersion

instance id {X : Scheme} : IsClosedImmersion (ùüô X) := by
  constructor
  . apply closedEmbedding_id
  . intro x r
    use r
    erw [PresheafedSpace.stalkMap.id]
    exact Function.funext_iff.1 coe_id _

/- The file `OpenImmersion.Basic` doesn't use this `MorphismProperty` stuff,
but `Morphisms.FiniteType` does. I've emulated the latter for now.
Also at the moment the naming/namespacing is a mix of those two files... - Amelia -/

/-- Suppose we have maps of schemes `f : X ‚ü∂ Y` and `g : Y ‚ü∂ Z` which are both
closed immersions. Then their composition `f ‚â´ g : X ‚ü∂ Z` should also be a
closed immersion. -/
theorem isClosedImmersion_stableUnderComposition :
    MorphismProperty.StableUnderComposition (@Scheme.IsClosedImmersion) := by
  rintro X Y Z f g ‚ü®hf_closed, hf_surj‚ü© ‚ü®hg_closed, hg_surj‚ü©
  constructor
  . exact hg_closed.comp hf_closed
  . intro x
    erw [PresheafedSpace.stalkMap.comp]
    exact (hf_surj x).comp (hg_surj (f.1.1 x))

instance isClosedImmersionComp {X Y Z : Scheme} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  [hf : IsClosedImmersion f] [hg : IsClosedImmersion g] :
    IsClosedImmersion (f ‚â´ g) :=
  isClosedImmersion_stableUnderComposition f g hf hg

/-- Isomorphisms are closed immersions. -/
instance ofIsIso {X Y : Scheme} (f : X ‚ü∂ Y) [hf : IsIso f] :
    IsClosedImmersion f := by
  constructor
  . let f_top_iso := TopCat.homeoOfIso (asIso f.1.base)
    exact Homeomorph.closedEmbedding f_top_iso
  . intro x
    apply (ConcreteCategory.bijective_of_isIso _).2

variable (R : CommRingCat) (M : Submonoid R)

/-- Composition with an iso preserves closed embeddings. This is a direct
corollary from `iso_is_closed_immersion` and
`isClosedImmersion_stableUnderComposition`. -/
lemma isClosedImmersion_respectsIso :
    MorphismProperty.RespectsIso @Scheme.IsClosedImmersion := by
  constructor <;> intro X Y Z e f hf <;> apply isClosedImmersion_stableUnderComposition
  <;> infer_instance -- not sure of formatting convention here

end Scheme.IsClosedImmersion

-- This needs moving to different file
/- A surjective hom `R ‚Üí+* S` induces a surjective hom `R_{f‚Åª¬π(P)} ‚Üí+* S_P`.
This is just an application of `localizationPreserves_surjective`, modulo the fact that
`IsLocalization f((f‚Åª¬π(P))·∂ú) R_P`, since `f((f‚Åª¬π(P))·∂ú)` is just `P·∂ú`... -/
lemma surjective_localRingHom_of_surjective {R S : Type u}
    [CommRing R] [CommRing S] (f : R ‚Üí+* S)
    (h : Function.Surjective f) (P : Ideal S) [P.IsPrime] :
    Function.Surjective (Localization.localRingHom (P.comap f) P f rfl) :=
  @localizationPreserves_surjective R S _ _ f ((P.comap f).primeCompl)
    (Localization.AtPrime (P.comap f)) (Localization.AtPrime P) _ _ _ _ _
    ((Submonoid.map_comap_eq_of_surjective h P.primeCompl).symm ‚ñ∏ Localization.isLocalization) h

-- will check naming convention - Amelia
/-- Given two commutative rings `R S : CommRingCat` and a surjective morphism
`f : R ‚ü∂ S`, the induced scheme morphism `specObj S ‚ü∂ specObj R` is a
closed immersion. -/
lemma spec_of_surjective_isClosedImmersion {R S : CommRingCat} (f : R ‚ü∂ S)
    (h : Function.Surjective f) :
    Scheme.IsClosedImmersion (Scheme.specMap (CommRingCat.ofHom f)) := by
  constructor
  . apply PrimeSpectrum.closedEmbedding_comap_of_surjective _ _ h
  . intro x
    erw [‚ÜêlocalRingHom_comp_stalkIso, CommRingCat.coe_comp, CommRingCat.coe_comp]
    show Function.Surjective (_ ‚àò _)
    apply Function.Surjective.comp (Function.Surjective.comp _ _) _
    . let stalk_iso := (StructureSheaf.stalkIso S x).inv
      exact (ConcreteCategory.bijective_of_isIso stalk_iso).2
    . exact surjective_localRingHom_of_surjective f h x.asIdeal
    . let stalk_iso := (StructureSheaf.stalkIso ((CommRingCat.of R))
        ((PrimeSpectrum.comap (CommRingCat.ofHom f)) x)).hom
      exact (ConcreteCategory.bijective_of_isIso stalk_iso).2

instance spec_of_mk_isClosedImmersion {R : CommRingCat.{u}} (I : Ideal R) :
  Scheme.IsClosedImmersion (Scheme.specMap (CommRingCat.ofHom (Ideal.Quotient.mk I))) :=
spec_of_surjective_isClosedImmersion (CommRingCat.ofHom (Ideal.Quotient.mk I))
  Ideal.Quotient.mk_surjective

end AlgebraicGeometry
